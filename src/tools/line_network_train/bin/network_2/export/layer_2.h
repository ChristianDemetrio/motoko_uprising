#ifndef _LAYER_layer_2_H_
#define _LAYER_layer_2_H_


#include <EmbeddedNetConfig.h>


#define layer_2_type "convolution"

const sEmbeddedNetShape layer_2_input_shape = {4, 4, 8};
const sEmbeddedNetShape layer_2_output_shape = {4, 4, 8};
const sEmbeddedNetShape layer_2_shape = {3, 3, 8};

#define layer_2_weights_size ((unsigned int)576) //array size
#define layer_2_weights_range ((nn_t)1621) //multiply neuron result with range/1024

const nn_weight_t layer_2_weights[]={
-2, 5, 25, -3, -5, -6, 3, 2, 3, -11, 0, -63, 2, 1, -8, 3, 
-4, 2, 9, 5, 1, -4, 7, -2, 3, -9, 2, -5, -20, 7, -6, -10, 
-2, 11, -5, 3, -127, -25, -18, 3, -26, 19, -5, 13, 4, -6, -8, 26, 
3, -11, 8, -5, 4, 8, -2, 4, -9, 10, -5, -3, -8, 0, -10, -7, 
-9, -21, 1, -17, 8, 0, 6, -8, -17, -1, -22, -6, 0, -3, 2, 7, 
1, 27, 9, -33, -4, 4, -3, -5, 0, 0, -6, 4, -5, 7, 3, -9, 
6, 8, -2, 0, -24, 7, 4, -4, -5, 1, 11, -2, 7, 9, -62, 1, 
-1, 5, 6, 12, 8, 12, -1, 9, 7, -10, -12, -1, 5, 2, 1, -4, 
5, 1, -8, -7, 5, 4, -5, -15, -23, 1, -4, -8, 3, -1, 11, 6, 
3, 28, -94, -4, -2, 2, -2, -7, 2, -4, 9, 58, 1, -9, 0, 5, 
-6, 1, -9, 7, -7, 1, 1, -9, -5, 9, -4, -12, -22, 17, 8, -2, 
0, 2, -10, -4, -34, -14, 29, -17, 3, -3, 15, 6, 4, -1, 12, 8, 
-8, 4, 7, 0, 1, -6, 4, 11, 5, 8, -4, -7, -4, 14, -7, 23, 
-31, -34, 11, -40, -16, -23, -3, -19, 0, 18, 21, 2, -13, -2, 4, 3, 
-2, -15, 0, -65, 3, 11, 3, -3, 1, 6, 9, 4, 2, -9, -9, 4, 
-2, 5, 0, -5, -19, 12, 3, -9, 11, 4, -3, 0, -70, -42, -33, 2, 
-28, 11, 5, 9, -1, -15, 0, 23, -5, -3, 1, 6, -1, 0, -16, 2, 
0, -2, 11, 5, 7, -5, -4, -5, -9, -1, 17, -15, 18, 20, 1, -4, 
-33, 22, -7, -2, -1, -5, 0, 2, 0, 0, -10, 9, -1, -7, 10, -1, 
3, 1, 0, 2, 0, 0, -2, 5, -9, -6, 0, 17, -31, -15, 5, 0, 
6, 0, 4, -3, -46, 9, 20, 7, 11, 6, 3, 3, 4, 7, 9, 2, 
2, -4, -5, -3, 0, 2, -4, 0, -4, 4, 6, 7, -7, 4, 4, -44, 
-14, 5, -14, 0, -2, -9, 14, -1, 62, -12, 5, 8, -9, -11, -2, -2, 
-2, -88, 34, 2, -18, 13, -5, -12, -10, -4, -4, 5, -3, -9, -7, 1, 
7, -7, -5, -1, -20, 12, 8, -14, -7, -9, -13, 4, -49, 5, 0, 40, 
8, 12, 8, 5, 0, 3, 13, 18, -3, 5, 2, -1, -14, 3, -1, -4, 
-1, 10, 1, -1, 6, 3, -5, -19, -15, -4, 7, -19, 33, -8, -27, 9, 
-52, 2, -19, 0, -7, 2, 3, 8, -5, 18, 25, 9, -15, 1, -4, -2, 
-1, 1, -9, 3, 8, -7, 6, 4, 0, 2, 9, 10, -45, -5, 2, -3, 
2, 6, 2, -13, 25, -3, -40, 15, 7, 3, 1, -2, -5, 25, 4, -2, 
7, -1, -1, -10, 4, 3, 5, 9, 12, 0, -8, 8, 3, -6, 3, -42, 
-20, 0, -3, 2, 10, -12, -4, 1, -7, -9, 5, 0, -5, -7, -7, 2, 
1, 0, 9, 4, -5, -3, 6, -5, -1, -7, 3, 9, 7, -3, -2, 2, 
-3, 5, -7, -5, 8, -4, 4, -2, 4, -1, 1, -1, -4, -8, -2, 8, 
4, -7, -9, 4, 5, 6, -2, -1, -9, -8, 3, -6, 1, -3, 9, 3, 
4, -6, -2, 5, 6, 0, -5, 9, 3, 0, -8, -6, -8, 8, 2, -4, 
};




#define layer_2_bias_size ((unsigned int)8) //array size
#define layer_2_bias_range ((nn_t)220) //multiply neuron result with range/1024

const nn_weight_t layer_2_bias[]={
127, 93, -9, 57, 5, -36, 60, 0, };


#endif
