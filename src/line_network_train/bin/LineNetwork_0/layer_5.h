#ifndef _LAYER_layer_5_H_
#define _LAYER_layer_5_H_


#include <NetworkConfig.h>


#define layer_5_type "output"

const sLayerGeometry layer_5_input_geometry = {4, 4, 8};
const sLayerGeometry layer_5_output_geometry = {1, 1, 7};
const sLayerGeometry layer_5_kernel_geometry = {4, 4, 8};

#define layer_5_weights_size ((unsigned int)896) //array size
#define layer_5_weights_range ((nn_t)377) //multiply neuron result with range/1024

const nn_weight_t layer_5_weights[]={
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-10, 12, -3, -2, -11, 0, 0, 0, -1, 0, 0, 0, 14, 2, 0, 1, 
10, -6, 9, -1, -14, -9, 0, -12, -4, -7, 0, -1, 4, -12, 1, 29, 
-7, -3, -16, -16, -3, 1, 0, 0, -8, 0, 0, -3, -6, 0, 0, -7, 
10, 0, 4, 10, 0, 0, 1, -1, 2, 0, 0, 0, -4, 1, 0, 1, 
13, 26, 6, 1, 18, 24, 0, 3, 6, 36, 26, -2, -4, 29, 2, -4, 
-1, 3, -2, -3, -1, 4, -1, -2, -2, 3, -1, -1, -7, 0, 1, -2, 
0, 0, 0, -2, -1, 1, 0, -2, -3, 1, 2, -1, -2, 1, 1, 0, 
-2, -33, 0, -13, -12, -39, 0, -12, 0, -45, -8, -13, 21, -42, -6, -17, 
9, -14, 11, 13, -10, 0, 0, 0, -11, 0, 0, 0, 10, 0, 0, 0, 
-5, -5, 14, -5, -12, 15, 5, 0, 13, 10, 2, 0, -13, 18, 0, 0, 
-10, 13, 3, 6, 9, 2, 0, 0, -4, 2, 0, 0, 13, 1, 0, 0, 
4, 7, 0, 13, 12, -3, 0, 0, 6, 0, 0, 0, -9, -8, -1, -1, 
-13, 9, 18, -10, -11, 18, 13, -7, 8, 30, 6, -3, 1, 17, 30, 7, 
-2, 0, 1, -2, -1, 1, 0, -2, 0, 0, 0, -1, 0, 0, 0, -2, 
-1, -1, 2, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, -1, 0, 0, 
-13, -7, -7, -1, 2, -5, -11, -6, 8, -8, -7, -10, 4, -2, -1, -12, 
16, 4, -4, 3, -4, 0, 0, 0, 12, 0, 0, -2, 13, 0, 0, -3, 
-7, -7, 5, 2, 1, -2, -6, 5, -10, 0, -9, 4, 2, -7, -12, 0, 
2, 1, 12, 1, -6, -1, 3, 0, 3, 1, 4, 0, 13, 1, 1, 1, 
-6, 11, 8, 14, -5, 4, 0, -1, 0, 5, -2, 0, 8, 14, -7, 0, 
-1, -10, 30, 4, 8, -3, 37, 16, 3, -5, 19, 24, -2, 6, 24, 25, 
0, -4, -1, 1, -3, -3, 1, -1, -1, 0, 2, -4, -1, 0, 0, -3, 
-1, -1, -1, 1, -1, -1, 0, 1, -1, -1, 0, 1, 0, 0, 0, -1, 
12, 6, 8, 0, -9, -2, 1, -1, -27, 0, -38, 41, 7, 3, -18, 67, 
13, -15, -14, 12, -14, 0, 0, 0, -7, 0, 0, 3, 3, 0, 0, 3, 
-11, 0, -9, -16, -2, 0, 12, 2, -6, -2, 17, -2, 6, 0, 22, -2, 
-11, -16, -12, 6, 15, 0, -1, 0, 6, 0, 0, -1, -13, 2, 5, 0, 
6, 3, -1, 6, -6, -1, -1, 2, 9, -4, 0, 0, 1, -3, -9, 1, 
-5, 9, 14, 18, -3, -17, 14, 14, -9, 1, 3, 26, -2, 4, 21, 33, 
2, 1, 1, 1, 1, 0, -1, 4, -4, -1, 0, 3, -5, 1, -2, -5, 
1, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 1, -3, 0, 0, 0, 
0, 9, 2, 8, 19, 18, 18, 12, 61, 49, 67, -32, -35, -22, 32, 68, 
-5, -15, -4, -14, 11, 0, 0, 0, -7, 0, 0, -1, 0, 0, 0, -1, 
-14, 2, -5, -11, -5, -2, -10, -5, -4, -3, -12, -3, 5, 0, -14, -2, 
14, 4, -15, 8, -9, 0, -1, 0, 1, 0, -2, -1, 15, 0, 0, -1, 
13, 6, 9, -1, -4, 0, 2, 0, -4, -1, 1, 0, -10, -4, 22, -3, 
5, 18, 5, 20, 0, 11, 7, 22, 15, 19, 5, 37, -12, 13, 4, 35, 
0, 0, 0, 0, 0, 1, 1, 1, -4, -1, 1, 9, -4, 0, 0, 24, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -3, -1, -1, 4, 
10, -6, 0, -7, 7, -5, -4, -11, 14, 0, -3, -3, 115, 127, 19, -104, 
};




#define layer_5_bias_size ((unsigned int)7) //array size
#define layer_5_bias_range ((nn_t)255) //multiply neuron result with range/1024

const nn_weight_t layer_5_bias[]={
111, 127, 107, 92, 98, -6, 97, };


#endif
