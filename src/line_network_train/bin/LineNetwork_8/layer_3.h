#ifndef _LAYER_layer_3_H_
#define _LAYER_layer_3_H_


#include <NetworkConfig.h>


#define layer_3_type "dense convolution"

const sLayerGeometry layer_3_input_geometry = {4, 4, 8};
const sLayerGeometry layer_3_output_geometry = {4, 4, 16};
const sLayerGeometry layer_3_kernel_geometry = {3, 3, 8};

#define layer_3_weights_size ((unsigned int)576) //array size
#define layer_3_weights_range ((nn_t)1521) //multiply neuron result with range/1024

const nn_weight_t layer_3_weights[]={
0, 1, -1, -1, 1, -1, 1, 0, 0, 1, 1, 1, -1, -1, 1, 1, 
-1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 0, -1, -1, 
0, 0, -1, 1, 1, -1, 1, 1, 0, 1, -1, 1, -1, 1, -1, 0, 
-1, -1, 1, 1, -1, 1, -1, 1, 0, 1, -1, -1, 1, 1, -1, -1, 
-1, -1, 1, 1, -1, -1, -1, 0, -1, 1, 1, 1, -1, 1, -1, 0, 
-1, 1, -1, 0, -1, 1, -1, -1, -1, 1, 0, -1, 1, 0, 0, 0, 
-1, 1, -1, 1, -1, 1, 1, 1, -1, 0, 0, 1, 0, -1, -1, 0, 
1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 
-1, 1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, 1, 0, 1, 1, 
-1, -1, -1, -1, -1, 0, -1, 1, -1, -1, 1, 1, -1, -1, 0, 1, 
-1, 0, 1, 1, -1, -1, 1, 0, 1, 1, 0, 1, -1, 0, 1, 0, 
-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, -1, 0, -1, -1, -1, 
0, 1, -1, 0, -1, -1, -1, -1, 0, 1, -1, -1, 1, -1, 0, -1, 
1, 0, -1, 1, 0, 1, -1, -1, 1, -1, -1, -1, 1, 0, -1, 1, 
1, -1, -1, -1, 0, 0, -1, -1, 0, -1, -1, 0, 0, -1, -1, -1, 
-1, 1, -1, -1, -1, -1, 1, -1, 1, 0, 1, 0, 1, 0, -1, 1, 
-125, 2, 23, 36, -12, 5, 18, 26, -47, 8, 44, -9, 18, 5, -2, 3, 
-7, -49, -36, -15, -14, 25, -13, 22, 20, 30, -13, -5, -60, -25, -23, 20, 
1, -5, -4, -2, -3, 17, -26, -30, -1, 9, 20, -11, 22, 28, -41, 3, 
1, -9, -7, -19, -1, -5, 5, -14, -5, 14, -94, -3, -5, -14, -94, -9, 
-14, -51, 8, 1, 32, 15, 24, 31, -102, 30, -31, -1, 0, 23, 0, -5, 
-22, 17, -9, -33, 48, -41, 17, -4, -23, 4, -12, -7, -33, -26, 5, -20, 
-5, 25, 2, -27, 15, -28, -20, 13, -3, 4, 2, -6, 9, -7, -7, -14, 
-2, -17, 20, 6, -12, 19, 6, 22, 4, -27, -5, -17, 5, 2, 3, -28, 
0, 7, -32, 10, 17, -1, 14, -127, -24, -3, -6, -31, 8, -5, -6, -46, 
0, -13, -25, 10, -58, 9, 10, -20, 0, -29, -24, 0, 3, -56, -25, 19, 
-19, 15, -16, 9, 27, 5, -8, -32, 13, -3, -13, 16, -13, 21, -2, 50, 
9, 4, 7, 2, 8, -73, 4, -7, 25, -21, -8, 12, 5, -5, -5, -20, 
-3, -15, -7, -26, 21, -13, 5, -8, -18, -8, 22, 10, -28, -25, 47, -30, 
-10, -46, -70, -33, 8, -29, -6, -14, 43, 36, 26, -21, 37, 38, -30, 13, 
3, -49, 8, -56, -69, -41, 5, -19, 5, -8, -11, 44, -19, -22, 4, 15, 
-13, -43, 16, 22, -23, -11, 1, -24, -12, 11, -4, -7, 2, -31, -6, 5, 
2, -11, 7, 1, -25, -12, 14, 9, -7, 7, -1, 17, -6, -6, -18, -34, 
3, -8, 0, 10, -35, -16, 35, 0, -15, 9, 10, -16, -8, 8, 4, 34, 
-41, -3, 5, -47, 21, -8, 13, -20, 33, 38, -56, -3, 0, -10, 18, -41, 
-21, 14, -26, -37, -38, 5, 20, -10, 21, -2, -2, 0, 1, 8, -11, 34, 
};




#define layer_3_bias_size ((unsigned int)8) //array size
#define layer_3_bias_range ((nn_t)177) //multiply neuron result with range/1024

const nn_weight_t layer_3_bias[]={
-4, -1, -10, 99, 3, -47, -4, -127, };


#endif
