#ifndef _LAYER_layer_3_H_
#define _LAYER_layer_3_H_


#include <NetworkConfig.h>


#define layer_3_type "dense convolution"

const sLayerGeometry layer_3_input_geometry = {4, 4, 8};
const sLayerGeometry layer_3_output_geometry = {4, 4, 16};
const sLayerGeometry layer_3_kernel_geometry = {3, 3, 8};

#define layer_3_weights_size ((unsigned int)576) //array size
#define layer_3_weights_range ((nn_t)669) //multiply neuron result with range/1024

const nn_weight_t layer_3_weights[]={
2, 2, -2, -2, -2, -2, -2, 2, 2, -2, 2, 2, 2, 2, 2, -2, 
2, 2, 2, 2, 2, -2, 2, 2, -2, 2, 2, -2, 2, -2, 2, 2, 
-2, -2, 2, -2, 2, 2, -2, 2, 2, 2, -2, 2, 2, 2, 2, -2, 
2, 2, 2, 2, 2, -2, -2, 2, -2, -2, 2, -2, -2, 2, -2, 2, 
2, 2, -2, -2, 2, -2, 2, 2, -2, 2, -2, -2, 2, 2, 2, 2, 
2, -2, 2, 2, 2, -2, -2, 2, 2, 2, -2, 2, 2, -2, -2, -2, 
2, 2, -2, -2, -2, -2, 2, -2, 2, -2, 2, 2, 2, 2, -2, 2, 
-2, -2, 2, -2, -2, 2, 2, -2, 2, -2, -2, -2, -2, -2, -2, 2, 
2, 2, -2, -2, -2, -2, -2, 2, 2, -2, 2, 2, -2, 2, -2, 2, 
2, 2, 2, -2, -2, 2, 2, 2, 2, -2, 2, -2, 2, -2, 2, 2, 
2, -2, 2, -2, 2, -2, -2, -2, -2, -2, 2, -2, -2, 2, 2, -2, 
2, -2, 2, -2, -2, 2, 2, 2, 2, 2, 2, -2, -2, 2, -2, -2, 
2, 2, -2, -2, 2, -2, -2, 2, -2, 2, 2, 2, -2, 2, 2, 2, 
-2, 2, -2, -2, 2, -2, 2, -2, -2, 2, -2, -2, 2, 2, 2, -2, 
-2, 2, -2, -2, -2, 2, 2, 2, -2, -2, 2, -2, 2, 2, 2, 2, 
-2, -2, 2, -2, -2, 2, -2, -2, -2, 2, 2, -2, 2, -2, -2, 2, 
-110, 33, 5, 2, 37, -38, -14, 50, -27, 12, 122, -10, -30, 7, 33, -36, 
-6, -51, -119, 31, 24, -43, 4, 36, 6, -35, -22, -10, -44, -124, -23, -127, 
1, -13, 8, 8, -7, 8, 11, -13, 2, 19, 4, 18, -102, 7, -14, -9, 
0, -29, 19, 19, -21, -17, -33, -4, -21, -12, 13, -1, 17, -1, 12, 51, 
-34, -64, -12, 42, -8, -27, 2, -7, 76, -21, 0, 22, -18, 4, 4, -18, 
25, 101, 46, -35, 75, -101, 23, -39, 10, -67, -27, 59, 11, -42, 12, 4, 
11, -14, -13, -9, 3, -99, -49, -47, -4, -28, 8, -5, -10, 24, -54, 37, 
-38, -17, 0, -10, -8, -48, 8, 18, -31, 5, 59, 5, 22, -38, 23, 2, 
76, -22, -12, -16, 36, -10, -15, -12, 11, 6, -54, -5, -67, -13, -40, 69, 
16, 16, 30, -5, 31, 0, 6, 1, 8, -17, 5, 28, -65, -83, 0, 30, 
22, -71, 1, 5, 18, -17, -15, 62, -21, 54, -29, -54, 19, -14, -6, -39, 
12, -17, 14, 8, -14, -21, 0, -1, -16, 8, -1, 22, 16, -17, 52, -77, 
26, 71, -87, 0, 5, -86, 11, 25, 51, 35, -15, -37, 9, 43, -36, 1, 
16, 40, 64, -55, 9, -8, -15, 0, -9, -43, 0, -3, -54, -24, -3, -14, 
-11, 0, -40, -44, 16, -55, -19, 3, 0, -7, 3, -115, -26, 1, -54, -50, 
-17, 2, -51, -45, 2, -28, -18, 13, 2, -2, -9, 5, -3, 5, -67, -17, 
-17, -28, 22, 0, -7, 14, 9, -77, -39, 8, 3, 20, -1, 1, 25, -20, 
-72, -11, 1, -31, -4, -58, -19, -25, -55, 58, -21, 42, 11, -9, 9, 11, 
-40, -13, -7, -36, 2, -16, -43, -56, -26, -48, 22, -73, -46, 3, -22, 14, 
9, 45, 59, 17, 24, -40, 64, -16, 15, -17, -16, 33, 4, 84, 19, -30, 
};




#define layer_3_bias_size ((unsigned int)8) //array size
#define layer_3_bias_range ((nn_t)281) //multiply neuron result with range/1024

const nn_weight_t layer_3_bias[]={
127, 9, 5, 28, 56, 29, -28, 82, };


#endif
