#ifndef _LAYER_layer_5_H_
#define _LAYER_layer_5_H_


#include <NetworkConfig.h>


#define layer_5_type "dense convolution"

const sLayerGeometry layer_5_input_geometry = {4, 4, 16};
const sLayerGeometry layer_5_output_geometry = {4, 4, 24};
const sLayerGeometry layer_5_kernel_geometry = {3, 3, 8};

#define layer_5_weights_size ((unsigned int)1152) //array size
#define layer_5_weights_range ((nn_t)1552) //multiply neuron result with range/1024

const nn_weight_t layer_5_weights[]={
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 1, 
0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, -1, 0, 
0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 1, 1, 0, 1, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 1, 0, 
5, 6, 2, -4, -2, -9, 13, -7, -1, 9, -26, -11, -5, -16, 0, -4, 
-48, -30, 49, -55, 1, 6, -31, -26, 15, -21, -53, 13, 13, -38, 7, 38, 
0, 0, -15, 3, 3, -8, 8, 4, -10, -3, 0, 3, 0, 0, -2, 1, 
-2, -7, -5, -5, -2, -2, 2, 7, -3, 9, 1, 33, 6, -70, -18, -37, 
-19, -42, 5, 1, -51, 4, -14, -15, -1, -16, 20, 18, -37, -22, -28, 6, 
11, -47, -43, 27, -45, -116, -51, 13, -4, -95, 1, -60, -49, -33, -93, -5, 
-13, -29, -15, -23, 0, -8, 7, 26, 2, 3, 0, 4, 6, 18, 5, -1, 
14, 14, 16, 0, 6, 25, -2, 1, 5, -15, 19, 2, -9, -10, 8, 4, 
-2, 10, 0, -10, -4, -20, -1, 4, -37, 7, -6, -30, -1, -2, 10, 11, 
-1, 14, 0, -3, 5, 4, 0, 0, 7, -14, -26, 7, -6, 18, -2, 0, 
-13, 12, -20, -3, -12, 3, -1, 20, 3, -3, -31, -4, -15, -9, -2, -1, 
2, 7, 2, 0, -1, 2, 21, 5, 21, 3, -4, -2, 5, -1, -2, 3, 
4, -4, -8, -6, 3, -2, -2, 5, -1, 0, 9, 5, -72, -26, -23, -44, 
-41, -59, 8, -85, 20, -13, -56, 8, 8, -27, 16, 4, -38, -27, -21, -19, 
-31, -45, -29, -38, -29, -54, -8, 23, -32, -20, -59, -56, 48, -80, -68, 13, 
32, 0, -14, -19, -23, -11, 26, 38, 0, 5, 0, -9, 7, -11, -16, -11, 
-15, 0, 12, -1, -3, 18, -10, -21, -12, 17, 14, 2, 40, -19, -2, -36, 
-5, -2, 6, -9, 1, -49, -15, 4, -34, 11, 0, -36, -14, 8, 16, 5, 
0, 0, -7, -2, -12, -3, 4, 0, -15, 28, 10, 2, -14, -16, -8, 0, 
-25, -15, 21, -26, 2, 1, -2, 5, 3, 3, -39, 10, -6, -10, -4, 9, 
-1, 9, 7, 2, -1, 12, 20, -3, 11, 1, 0, 11, 1, 0, 9, -2, 
-1, 5, -9, -2, 0, -9, 1, -7, -9, -1, -14, -88, 7, -62, -43, 16, 
-49, -66, -2, -66, 10, 28, 29, 22, 0, 19, 8, 3, -4, 14, -31, -6, 
4, -11, 13, -4, 3, -14, -15, -15, -27, -9, 21, -13, -6, -9, -41, 6, 
-11, 27, -2, -7, -1, 1, 18, 56, 5, 7, -8, 4, 9, -49, -6, 10, 
-2, -10, -4, -8, -7, 9, -2, 4, -3, -8, 0, -6, -4, 0, -5, -22, 
12, -2, 1, 2, 0, -2, 13, 19, 0, 26, 0, 0, 1, 10, 13, -1, 
-4, -15, 0, 4, 3, 0, 0, 19, -5, 17, -18, 0, -12, 4, -5, -4, 
-10, -11, 18, -28, 9, -5, 2, -1, -13, -15, -20, -7, -23, -5, -19, -41, 
0, 5, 14, 0, -4, 4, 12, 9, 19, 1, 3, 1, 0, -3, -2, 0, 
0, 3, -5, 0, 2, -1, -2, -5, -2, 0, 1, -49, -18, -19, -36, -25, 
-41, -49, -7, 5, -22, 3, 0, -13, -33, 9, 1, -33, 30, -12, -21, -31, 
-17, -17, -55, 4, -2, -37, -5, 7, 33, 5, -42, -79, -8, 0, -7, -3, 
-17, -25, -15, -7, 0, 10, -60, -53, -5, 0, 0, 3, -3, 7, -19, -22, 
5, 17, 20, 5, 2, 11, 17, 7, -14, 12, 1, -2, -7, -14, -15, -3, 
-24, -15, 9, -3, 15, -8, 17, 6, 1, 5, -16, 0, -9, -1, 0, -7, 
-7, 10, 4, -30, 21, -11, 8, -11, 0, -17, -9, -31, 1, 9, -9, 21, 
1, 8, 7, -5, -2, -19, -6, -8, -3, -9, 1, 0, -16, -11, -13, 36, 
-13, -2, -3, 3, 5, 8, 4, 4, -7, 0, 3, 2, 0, 0, 5, 2, 
2, 2, 0, -2, -2, 1, -7, -6, -5, -4, 2, 51, -55, -30, -6, -21, 
-14, -34, -3, -27, -10, 7, 0, -23, 9, -75, 14, 3, -5, -19, 3, 4, 
14, 16, 5, 44, 29, 8, 1, 15, 29, -28, -95, -59, -29, -3, -50, -31, 
-19, 2, -11, -9, -56, 6, 0, -30, 0, -3, 1, -1, 0, 9, -19, 13, 
-9, -5, 8, 10, 13, 14, 11, -20, 8, 6, -19, 6, 0, 6, -12, -59, 
-9, 18, -15, 0, -1, -1, -9, -5, -34, 1, 12, -26, 3, 2, 3, -16, 
0, 12, 0, -5, -21, -4, -3, -1, -6, -1, -24, 9, 0, -45, 2, -10, 
3, 24, -1, -41, -22, -21, 11, -17, 10, 4, 6, 4, -11, -18, -8, -6, 
-1, -2, 2, -1, -5, 7, 3, 10, -1, 1, 2, -2, -1, 5, -5, 0, 
5, -2, 5, 0, -5, 3, 0, -3, 7, 0, -1, 16, -106, -7, 10, -8, 
15, 6, -33, 46, 9, 20, -67, 11, 10, -87, 10, -34, -127, -57, 6, 16, 
-28, 34, -29, -35, 33, -5, 23, 21, -49, -72, 23, -43, 5, 33, 0, 5, 
-9, -2, -10, -34, -45, 42, -43, -34, 1, -2, -1, -3, -3, -22, -9, -7, 
-12, -5, 1, -2, 5, -27, 8, -2, 6, 10, -15, 17, 2, 3, -13, -3, 
-5, 3, 0, 0, -9, -18, 2, -9, -18, 7, -8, -1, 24, 13, -6, 3, 
13, 9, 5, 0, 9, -8, -11, -3, -11, -8, 2, 0, -2, 17, 23, -3, 
8, 20, 3, -13, -22, -3, -2, -16, 5, 4, -7, 6, 17, 5, 0, 12, 
};




#define layer_5_bias_size ((unsigned int)8) //array size
#define layer_5_bias_range ((nn_t)182) //multiply neuron result with range/1024

const nn_weight_t layer_5_bias[]={
11, -127, 46, 9, 14, 6, 53, -29, };


#endif
