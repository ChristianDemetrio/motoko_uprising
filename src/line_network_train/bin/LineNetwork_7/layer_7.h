#ifndef _LAYER_layer_7_H_
#define _LAYER_layer_7_H_


#include <NetworkConfig.h>


#define layer_7_type "output"

const sLayerGeometry layer_7_input_geometry = {4, 4, 12};
const sLayerGeometry layer_7_output_geometry = {1, 1, 8};
const sLayerGeometry layer_7_kernel_geometry = {4, 4, 12};

#define layer_7_weights_size ((unsigned int)1536) //array size
#define layer_7_weights_range ((nn_t)954) //multiply neuron result with range/1024

const nn_weight_t layer_7_weights[]={
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
2, 2, -1, 4, 0, -18, 2, -2, -3, 0, -13, 0, 2, 86, 48, -5, 
4, -1, 4, 2, -2, -3, -3, -25, 1, -5, 3, -10, -2, -11, 10, -23, 
-2, -4, -4, -1, 1, -9, -15, -16, 0, 15, -7, 5, -4, -20, -3, -17, 
-3, 0, 0, -3, -4, -36, -12, -1, 1, -53, -18, 0, -1, 7, -32, -5, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-2, -3, -4, -2, -4, -5, -3, 0, -1, 0, 4, 2, 1, -2, 3, -1, 
-3, 3, 0, 0, 0, 0, -2, -1, 6, 4, -3, -4, -4, 5, -2, -1, 
-10, 14, -1, -3, 26, 8, -6, -4, -22, 15, -9, -5, -43, 26, -9, -3, 
-2, -4, 2, 0, -1, 0, 5, 0, -4, 10, 2, 1, -4, 7, 6, 5, 
0, -3, 0, -2, 1, -29, 6, 12, 1, -46, 16, 18, 0, -43, -1, 27, 
-4, -4, -2, -4, -3, -7, 1, 1, -4, -5, 2, 6, -1, 2, -1, 12, 
-3, 0, 0, -4, 0, -9, -5, -4, 2, -12, -6, -21, 3, 15, 90, 1, 
0, -2, 0, 4, 0, 33, -18, -2, 4, 55, 54, -6, -1, -5, -2, 0, 
1, -1, 2, 2, -2, -12, 0, 4, -2, -16, 3, -37, 0, -37, 3, 64, 
-4, -4, 2, 3, 0, 1, -4, -4, -2, 7, -5, -4, 0, 7, -10, -4, 
1, -3, 3, 1, -3, -4, 20, -2, 1, 7, 59, -5, 1, -5, 61, -10, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
2, -2, -1, 0, -3, 2, -2, 3, 3, 0, 5, 1, -2, -3, -1, 1, 
0, -1, -2, -2, 1, 1, -1, -2, -2, 3, 0, -2, -8, 2, -1, -2, 
17, -6, 4, -1, -14, 0, 3, -2, -8, -5, 9, -2, -15, -14, 13, -1, 
-3, 4, -3, -2, -4, 3, 5, 0, 0, 0, 0, 0, -2, 3, 4, 1, 
0, -1, 3, 0, -2, -8, -18, 21, -2, 1, -26, 18, -3, 14, -30, 9, 
-1, 1, 0, 0, 0, 3, -6, 0, 3, 3, -2, -1, 4, 0, -5, 0, 
-3, -2, 0, -1, 0, -31, -8, 4, 4, -26, -9, 9, 2, -13, -69, -17, 
0, -4, 1, -3, 3, 11, 76, 1, -2, -9, -2, -3, 0, -1, 5, 2, 
-1, -3, 0, 3, -1, 28, 2, -22, -2, 23, 3, 50, -1, 86, 0, -1, 
0, 1, -4, 0, -3, -13, 0, -4, 2, -13, 0, -1, 2, -7, -4, -3, 
2, -3, 1, 0, -1, 10, 7, 4, 0, 5, -16, 11, -4, 0, -5, 28, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-5, 0, 0, 1, 0, -1, 0, -2, 0, 0, -2, -1, -1, 3, 0, 0, 
-1, 1, 1, -1, -1, 0, 1, -2, -1, 0, 2, -2, -2, -1, 2, -1, 
-4, 1, 12, -5, -7, -1, 14, -4, -9, -4, 9, -1, 0, -4, 3, 1, 
3, 0, -1, -3, 2, 2, 4, 6, 0, 3, 6, 9, 0, 4, 4, 5, 
3, -2, 2, 3, -1, 18, -36, 8, -4, 20, -39, 14, 3, 6, -18, -2, 
2, 0, -3, -4, -1, 10, 0, -4, 4, 6, -1, -1, 3, 9, 0, -1, 
1, 0, 4, -2, 1, 64, 7, 3, 1, -12, -7, 16, 3, 5, 3, 83, 
-1, 3, 3, 3, 3, 4, -38, -16, 1, 1, -15, -8, -1, 1, -4, -6, 
-4, 4, 2, 4, -2, 3, 3, 3, -1, 5, -14, -3, 0, -14, -67, 6, 
4, 4, 3, 0, 4, -5, -5, -2, 2, -3, 1, 5, -4, -7, 3, -2, 
1, 0, 4, -1, -4, -4, -3, 28, 0, -3, 0, 28, -2, 1, -3, -4, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, -3, 2, -6, 0, -2, 2, 0, 1, 2, -3, 2, -4, 1, 2, -4, 
-2, -4, 1, -2, -2, -2, 2, -3, -2, -1, 2, -1, -2, -2, 2, -2, 
-11, -1, -2, 13, -10, 0, -1, 16, -8, -1, 2, 9, -3, 1, 0, 2, 
0, -1, -4, 3, 0, 0, -4, 1, 2, -4, -1, -2, 0, 2, -2, 4, 
-2, 0, 4, 2, -2, 21, -1, -14, 0, 20, -17, -11, 0, 10, -22, -3, 
-3, 3, -4, -2, 0, 1, 1, -2, 4, 2, 0, -8, 2, 1, -1, -3, 
-2, -3, 0, 0, -1, -15, 56, -20, -2, 69, 114, -6, -1, 8, 0, -47, 
0, -4, -4, 3, -2, -3, -9, 21, -4, -1, -9, 4, 0, -2, -3, -1, 
0, 1, -3, 0, -4, -4, 24, 9, -3, 3, 41, -12, 3, -8, 113, -5, 
-1, -2, 1, -1, 2, 3, -9, -8, 2, -9, -15, -25, 2, -13, -3, -13, 
2, -1, -1, 2, -3, -2, 0, -11, 2, -3, -3, -17, 1, -41, 2, -1, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-3, -3, 3, 2, -1, 2, 0, 0, 2, -1, 1, -3, -2, -6, 1, 2, 
1, 1, 0, 3, -2, -2, 0, 5, -1, 0, 2, 0, -1, 0, 1, 0, 
6, -1, -2, 4, -4, -2, -4, 1, -7, -3, -5, 12, 11, 0, 6, 10, 
1, 2, 0, 2, 4, 5, 5, 6, -4, 13, 10, 7, -3, 7, 10, 3, 
2, 4, 0, 0, 0, 3, 29, -37, 0, 1, 19, -39, 3, 11, 11, -34, 
0, 2, 1, -4, -2, 8, 9, 12, -1, 5, 10, 7, 0, 13, 14, 7, 
1, -3, 3, 0, 0, -8, -26, -21, 0, 10, -31, -54, 0, -7, -6, -11, 
0, 3, -1, -4, 2, -13, -10, 7, 4, -13, -17, 40, -1, -10, -11, 11, 
0, -1, 0, 1, 3, -8, -17, -1, -4, -7, -28, -2, 1, -3, -34, -3, 
-3, -1, -1, -1, -2, 31, 30, -25, -3, -7, -55, -5, 1, -20, 3, -63, 
4, -1, -4, -4, 1, 3, -5, -9, 0, 3, -9, -11, 3, 116, -7, -4, 
0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-2, 2, 3, -1, 1, 0, -5, 3, -4, -2, -4, 1, 0, 0, 3, -1, 
1, 2, 1, 1, 2, 2, -1, 2, -4, -5, -1, 7, -9, -1, 0, 5, 
-2, -3, 0, 0, 8, 0, -3, -4, -12, -3, -7, -11, -56, -10, -6, 0, 
-1, -2, -2, 0, -1, 5, 4, 2, 1, 3, 2, 1, 3, 2, 2, 7, 
0, -4, -3, 2, -1, -4, 3, -8, -1, -1, 17, -32, -4, 4, 19, -34, 
3, -2, 0, -1, 3, 1, 0, 7, -2, 1, 11, 5, -2, -3, 11, 6, 
3, 0, 3, -1, 0, 0, -11, -33, 0, -15, -27, -43, -4, -2, 0, 3, 
0, 4, 2, 3, 4, -5, 0, -4, 4, -7, -1, -13, -1, -7, -10, 12, 
-2, -3, 0, -2, 2, -1, -7, -25, -4, -3, -7, -6, 1, 0, -26, -3, 
-4, 0, 3, 2, 3, -15, 7, 8, -2, 4, 94, 38, 0, -28, 0, 127, 
2, -4, 4, 3, -4, -8, -3, 2, -2, -4, -4, 0, -2, -61, 0, -2, 
0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-6, 1, 2, 5, -4, 4, -1, -1, 5, -3, 3, -1, 1, -2, -1, 2, 
0, 0, 0, 2, 0, 0, 0, 2, 2, 2, -2, 2, -3, -1, -1, 10, 
-7, -5, -1, -5, -11, -4, -1, -4, 5, -2, -1, -2, 61, 0, -7, -8, 
};




#define layer_7_bias_size ((unsigned int)8) //array size
#define layer_7_bias_range ((nn_t)222) //multiply neuron result with range/1024

const nn_weight_t layer_7_bias[]={
76, 102, 76, 36, 82, 43, 127, 68, };


#endif
