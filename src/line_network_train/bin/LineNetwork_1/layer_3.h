#ifndef _LAYER_layer_3_H_
#define _LAYER_layer_3_H_


#include <NetworkConfig.h>


#define layer_3_type "convolution"

const sLayerGeometry layer_3_input_geometry = {4, 4, 8};
const sLayerGeometry layer_3_output_geometry = {4, 4, 8};
const sLayerGeometry layer_3_kernel_geometry = {3, 3, 8};

#define layer_3_weights_size ((unsigned int)576) //array size
#define layer_3_weights_range ((nn_t)3089) //multiply neuron result with range/1024

const nn_weight_t layer_3_weights[]={
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
113, 102, -14, 43, 65, -58, -14, 83, -109, -55, 116, -107, -76, 120, -10, -25, 
110, 7, -77, 127, -2, -49, 93, 23, 30, 73, -28, 31, 103, -48, 36, 118, 
1, -3, 2, 2, -3, 5, -6, 7, 14, -1, -10, -3, -5, -9, 5, -8, 
0, -14, 6, 6, 13, 9, 16, 19, 4, -10, 7, 3, -20, 6, 7, -7, 
-1, 0, -3, 21, -1, 8, -4, -1, -2, 14, -7, -15, -6, -4, 1, 3, 
6, -4, 14, 0, -8, 0, -5, 0, -4, -1, -2, 13, 13, -14, 9, -11, 
3, -11, 0, -5, -7, 3, 2, 4, 0, -1, 0, 3, 2, 0, -6, 7, 
9, -5, 8, -13, -2, 19, -6, 4, -18, 17, -15, -7, -8, -19, 5, 2, 
-7, -28, 11, 2, -6, 5, 0, -24, -2, -3, -3, -17, -1, -6, -2, 0, 
4, -2, 0, -7, 0, 0, -4, -3, 3, 0, -10, 0, 2, 0, 1, 1, 
0, -2, 5, 4, 2, -4, 16, 0, 6, 6, 0, 7, 7, 7, -4, 7, 
-2, 0, 4, -3, 4, -5, -4, -1, 5, 0, 6, 0, -2, 28, -37, 1, 
22, -9, 2, -16, -8, -12, -7, -1, -2, -3, 1, 1, -1, -4, -2, 7, 
7, -1, -4, -14, 2, 0, 15, 6, 20, -7, 0, 5, -3, -2, 0, 5, 
0, 1, -6, 1, 0, -4, -3, -8, 8, -1, 0, -3, -4, 9, 3, -1, 
-9, -3, -1, 0, 7, 2, 9, -8, 0, 0, 3, 2, 2, -5, -6, -19, 
-6, 9, 1, -5, 15, -11, -6, -3, -2, -13, 5, 10, 2, -3, 4, 9, 
-12, 5, 12, -3, 12, 1, -5, 12, -2, 4, 4, 16, 1, -20, -6, 11, 
-4, 2, -2, 2, 0, 4, -1, 0, 3, 6, 2, -5, -2, 6, -2, 2, 
3, 14, -11, -5, -6, -7, 1, 0, -1, -5, 0, -2, 0, -3, 0, 0, 
};




#define layer_3_bias_size ((unsigned int)8) //array size
#define layer_3_bias_range ((nn_t)676) //multiply neuron result with range/1024

const nn_weight_t layer_3_bias[]={
0, 0, -1, 46, -22, -127, -32, -78, };


#endif
