#ifndef _LAYER_layer_5_H_
#define _LAYER_layer_5_H_


#include <NetworkConfig.h>


#define layer_5_type "output"

const sLayerGeometry layer_5_input_geometry = {4, 4, 12};
const sLayerGeometry layer_5_output_geometry = {1, 1, 7};
const sLayerGeometry layer_5_kernel_geometry = {4, 4, 12};

#define layer_5_weights_size ((unsigned int)1344) //array size
#define layer_5_weights_range ((nn_t)781) //multiply neuron result with range/1024

const nn_weight_t layer_5_weights[]={
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-1, 4, -1, 4, -2, 0, 0, 0, 1, 0, 0, 0, -4, 2, 0, 0, 
0, 0, -2, -3, 6, -1, 0, -2, 0, -1, 0, 4, 0, 0, 0, 8, 
-12, 9, 1, 5, 8, 12, 6, 0, 0, 10, -1, -3, -33, 6, 0, 12, 
-5, -1, 1, 0, 8, -4, -6, -7, 5, 10, 0, -6, -41, 0, 2, -1, 
20, 0, 0, 2, 25, -12, -11, -3, 25, -10, -11, -13, 78, -36, -17, -12, 
-3, -1, 0, 0, 7, -2, 0, 0, 10, 2, -3, -2, -14, 2, 0, 0, 
-4, 0, 1, 1, -3, -1, 0, 0, 9, 0, -3, -1, 0, 4, 1, 0, 
4, 1, 2, 1, 0, -1, 0, 2, 4, -4, -3, -1, 13, 0, 1, -4, 
5, 0, 1, 2, 2, -19, 10, 9, -5, -21, 5, 0, 0, -8, 4, 3, 
0, -1, 0, -2, 2, 0, 0, 4, -5, 0, 6, 4, 1, -1, 8, -1, 
6, 5, 5, -1, -2, 6, 7, -1, 3, 2, 3, 0, -6, 12, 3, -3, 
5, 3, 3, 2, 0, 25, 8, -13, -6, 27, 12, -8, 3, 24, 24, -10, 
0, -3, 2, 3, 2, 0, 1, 0, 3, 0, 0, 0, 4, -3, 0, 0, 
5, 5, -6, -5, 5, 0, 0, -2, 4, 1, 0, -3, 1, 2, 0, -6, 
5, 1, -1, -2, -3, 10, 4, -5, -10, 7, 12, -8, -1, 10, 13, -2, 
0, 15, -7, -5, -9, 18, -5, -5, -8, 15, -6, -5, -7, 10, -6, 0, 
-34, -6, -2, -1, -32, -6, -5, -5, -36, 2, -9, -6, -92, 3, -14, -9, 
5, 1, -1, -1, -2, 2, 0, 0, -4, 1, 3, 0, -1, 0, 4, 1, 
3, 2, -3, -2, 2, 5, -2, 0, -5, 6, -1, 0, -4, 4, -1, 0, 
-1, -1, -3, -1, 2, 0, -1, -2, 0, 2, 0, -2, -4, 1, 0, -1, 
-3, 4, -3, 5, -4, 25, -27, 9, 5, 18, -27, 9, 6, 24, -20, 2, 
-1, -4, -5, -5, -5, -2, 0, 6, 1, 0, 0, -3, 2, 8, 1, 0, 
0, 0, 0, 1, -2, 6, 9, 1, 1, 3, 12, -4, -4, 3, 12, 3, 
0, 5, 4, -4, -3, -15, 32, 5, 4, 0, 30, -4, -4, -8, 23, 8, 
-2, -2, 0, -1, 0, 0, 0, 1, 5, 0, 0, 0, 4, 1, 0, 0, 
-2, -1, -4, 2, -3, -4, 0, 0, 3, -3, 0, 3, -3, -1, 0, 3, 
-4, -19, 13, 7, -1, -14, 13, 4, -3, -8, 22, 2, 4, -12, 15, 1, 
-5, -13, 7, -9, -6, -14, 4, -10, -3, -11, 5, -9, -1, -16, 7, -9, 
2, 10, -17, -5, -3, 10, -13, -5, 0, 12, -8, -5, 5, 10, -9, 2, 
-3, -1, 3, 0, -3, 0, 2, 0, -2, 0, 2, 0, 0, 0, 2, 0, 
-2, -4, 4, 0, -1, -3, 3, 0, -1, -3, 4, -1, 0, -4, 2, -2, 
-2, 1, 2, -3, -1, 1, 1, -2, 0, 2, 0, -2, 0, 0, -1, 0, 
-5, 0, 4, 2, 6, 13, 12, -19, -4, 19, -12, -7, -1, 11, -30, 16, 
1, -1, 2, 1, -1, 3, -1, 0, 1, 3, 8, 1, 5, 8, 5, -2, 
2, 5, -4, -1, 1, 5, 2, 4, -2, 0, 8, 8, 0, 0, 5, 7, 
-5, -4, 0, -1, -3, 7, -12, 23, -4, -6, -9, 14, 3, -6, 2, 4, 
-5, 0, -2, 1, 5, 0, 0, 0, -5, 0, 0, 0, 0, 0, 0, 0, 
0, -4, 5, 0, -2, 8, 0, 0, -3, 11, -2, 0, 1, 1, 0, 0, 
0, 10, -4, 5, -1, 9, -12, 13, 0, 4, -4, 13, 4, 5, -1, 1, 
-4, -3, -5, 11, -6, -5, 1, 6, -3, 1, 3, 4, 4, 2, 7, -4, 
-6, -8, -1, 4, -9, -12, 3, 6, -6, -1, 17, -13, 1, -2, 0, -13, 
-1, 0, -2, 0, -3, -1, -2, 1, -2, 0, -1, 0, 1, 0, -2, -2, 
0, 0, -1, 0, 0, 0, -1, 0, -1, 0, 1, -2, -1, 0, 1, -3, 
-1, -1, -2, 1, 0, -1, 1, 2, -1, 0, 3, -3, -2, 0, 1, -9, 
-4, 0, 5, 5, 2, 0, 8, -14, 0, 1, 38, -33, 2, 0, 29, -17, 
6, -4, 4, -1, 0, 3, 9, 3, -5, -2, 3, 3, 0, 7, 4, 1, 
1, 0, -3, -1, 1, -1, 7, 9, 3, 2, 2, 10, 1, -2, 6, 9, 
-3, 5, 1, 1, -4, -15, -21, 22, -3, -31, -24, 20, 5, -40, -25, 16, 
-4, 4, -2, -1, 0, 0, 0, 0, 5, 0, 0, 0, -3, 0, 0, 0, 
3, -5, 3, 2, 0, -4, -4, 0, -3, -7, -5, 0, -3, 1, -5, 0, 
6, 5, 0, 6, 6, -2, -10, 15, -6, -5, -14, 15, 0, -10, -7, 15, 
4, 1, 1, 4, -2, -1, -8, 10, -17, -17, -2, 13, -13, 0, -7, -1, 
9, 4, 17, -14, 8, 3, 5, -22, -25, -18, 11, 5, -15, 3, 6, -77, 
0, 0, 0, 1, 1, 0, 0, 0, -7, -3, -3, 3, -9, -2, -1, 0, 
0, 0, 0, 0, 1, 0, 0, 1, -2, -2, -4, 4, -3, -2, -3, 2, 
1, 0, 1, 3, 1, 0, 0, 1, -2, -4, -1, 9, -3, 0, 2, 7, 
-4, 0, -1, -3, -4, -8, -4, 4, -1, 0, 2, 0, 3, 4, 19, -24, 
6, 0, 2, -5, 5, 10, -2, 4, -3, 1, 6, -2, -3, 7, -1, -1, 
-4, -2, 0, 5, -3, 0, 3, 7, 0, -1, -4, 3, 0, -1, -6, 3, 
-4, 0, 6, -4, -3, -2, -10, -9, 4, 0, -22, 3, 0, 1, -35, 18, 
1, -2, -3, 5, -5, 0, 0, 0, -4, 0, 0, 0, -3, 0, 0, 0, 
1, 0, 0, 2, -5, 0, 4, 0, -3, -1, 6, 0, -2, -5, 3, 0, 
0, -9, -3, -9, 3, 0, 5, -3, 3, 0, 6, -4, -10, -6, -13, 11, 
3, 3, 2, -1, 9, 5, 8, 2, 6, 6, 5, 8, -5, 8, -2, 23, 
7, 3, 0, 15, 9, 9, 9, 24, 3, 10, 3, 31, -23, -24, 36, 127, 
0, 0, 0, -2, 0, 0, 0, 0, 2, 1, 0, -1, -5, -2, -2, 2, 
2, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, -5, -1, 0, 4, 
0, 0, 0, -1, 0, 0, 0, 0, 3, 2, 0, -2, -5, 0, -1, 8, 
};




#define layer_5_bias_size ((unsigned int)7) //array size
#define layer_5_bias_range ((nn_t)309) //multiply neuron result with range/1024

const nn_weight_t layer_5_bias[]={
80, 75, 79, 111, 73, 127, -50, };


#endif
