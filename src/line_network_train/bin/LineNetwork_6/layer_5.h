#ifndef _LAYER_layer_5_H_
#define _LAYER_layer_5_H_


#include <NetworkConfig.h>


#define layer_5_type "output"

const sLayerGeometry layer_5_input_geometry = {4, 4, 8};
const sLayerGeometry layer_5_output_geometry = {1, 1, 8};
const sLayerGeometry layer_5_kernel_geometry = {4, 4, 8};

#define layer_5_weights_size ((unsigned int)1024) //array size
#define layer_5_weights_range ((nn_t)1034) //multiply neuron result with range/1024

const nn_weight_t layer_5_weights[]={
-1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 
-1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 
-1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 
1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 
1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 
1, -1, -1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 
1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 
-1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 
-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 
1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 
-1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, 
-1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 
1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 
1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 
4, -2, 0, 0, 4, 12, -2, 5, 0, 10, -2, 2, -3, 66, 3, 9, 
0, -2, -1, 1, 3, 24, -1, 2, -2, 24, 3, 2, 1, -33, -9, -6, 
-1, 0, -4, 3, 4, 4, 0, 0, 3, 4, 0, 0, 0, 31, 45, -5, 
4, 4, 1, -4, -4, -25, -19, 2, 4, -18, -17, 1, -1, 53, -2, -1, 
5, 8, -3, 1, 2, 5, -2, -1, -3, 5, 7, -1, -10, 2, 5, 6, 
9, 0, -11, -7, -1, 10, -7, -4, -10, 16, -3, 0, -13, 39, -7, 0, 
4, -2, -2, -3, 2, 4, -2, -2, -5, 2, 0, -1, -4, 0, -1, -1, 
-2, 0, 0, 0, 0, 0, 0, -1, 1, 2, 0, -1, 0, 1, 0, 0, 
2, -1, 1, -2, 0, 0, -2, 2, -1, -7, -2, 6, 0, -33, -2, 4, 
-5, 0, 3, 1, 3, 2, 23, -2, 3, 0, 13, -1, -1, -1, 16, 1, 
-5, -1, -4, 5, 3, 4, 0, 0, -3, 3, 0, 0, -4, -14, -35, -5, 
2, 2, 4, 1, 0, 15, 38, 4, -3, -2, 34, 2, 1, -30, -20, 1, 
-4, 4, 4, -4, 0, 1, 4, -5, -1, 3, 4, -9, -2, 5, 9, -4, 
-4, 2, -2, -3, -4, -1, 1, -4, -2, -1, 10, -1, 0, -35, 14, -3, 
-4, 3, 1, -2, -3, 0, 1, -2, -2, 0, 2, -1, -1, 0, 0, 0, 
1, 2, -2, -1, 0, 2, -1, 0, -1, 0, 0, 0, -2, 0, 0, 0, 
2, -5, 3, -4, 5, 5, 3, -4, 0, -3, 7, -3, -2, -6, -3, -6, 
0, -1, 3, 5, -5, -3, -7, -9, 4, 1, -7, -14, 0, 6, 9, -13, 
-4, -2, 0, -4, 0, 0, 8, -1, 4, 0, 4, 0, 1, 3, 19, 8, 
-5, 0, 0, -3, -2, 2, -7, -18, -5, 5, -2, -29, -5, 2, 64, 13, 
-9, -5, 10, 8, -5, -1, 12, -1, 0, 3, 2, 5, 4, -1, 9, 0, 
-12, -6, 14, -3, -10, -7, 14, -8, -5, -4, 15, -6, 2, 4, 8, -10, 
-3, -4, -1, -1, -3, -3, 0, -2, -2, -2, 0, -1, -1, -2, 0, -1, 
-1, -1, 4, 0, -1, 0, 3, -2, -1, 0, 2, -1, 0, 0, 0, 0, 
2, 3, 2, 1, 0, 0, 15, 0, 1, 9, -14, -18, 0, 0, -27, -27, 
2, -4, -3, 2, 3, -1, -9, 6, -1, 0, -6, 12, 5, 7, 0, 69, 
0, 0, 3, -2, 0, 0, -1, 2, 2, 0, 0, -6, 3, 0, -11, -14, 
-4, 1, -3, 0, 1, 0, -2, 32, 0, 1, -1, 38, -4, -1, -24, -17, 
-4, 0, -2, 3, -1, 0, 3, 10, -11, 1, 2, 6, 1, 4, 6, 4, 
-4, -6, -8, 13, -14, -11, -11, 19, -10, -5, 4, 13, -7, -9, 4, -3, 
0, 0, -1, 0, -4, -1, -2, 3, -5, -1, 2, 0, -4, 0, 0, -1, 
0, -1, 0, 0, 0, -2, 0, 1, -1, 0, 2, 0, -1, 0, 2, -6, 
1, -1, 2, 2, 3, -8, -6, 5, 2, 7, 28, 34, -5, -3, -9, 124, 
1, 0, -1, 3, 2, -3, -4, 17, 2, -4, -2, -1, 0, 3, 1, -22, 
4, 1, 4, 0, 3, 0, -4, 2, -4, -1, -2, 1, -1, -2, -15, -55, 
-5, 0, -2, 4, -2, -2, -1, -9, 1, 0, -3, -4, 5, 0, -10, 30, 
3, 3, 8, 7, 3, 2, 1, 3, -10, -9, 1, 7, -14, -8, -4, 3, 
11, 7, 4, 1, 3, 5, 2, 10, -25, -13, -14, 8, -7, 0, -4, -2, 
4, 3, 1, 2, 4, 3, 1, 0, -8, -4, 1, 6, -11, 0, 0, -3, 
1, 0, 0, 0, 1, 0, 0, 0, -1, -1, 1, 3, -2, 0, 1, 0, 
-1, 0, -4, -1, -4, -2, -7, -5, -4, -8, -6, -26, -3, -1, 12, -127, 
3, 2, -3, -4, -1, 0, 0, -11, 3, -2, -1, -1, 0, -1, -1, -18, 
2, -3, -3, 3, 1, -2, -1, 0, 5, -2, -1, 7, 1, -5, -9, 87, 
-2, 3, 2, -4, -4, -4, -6, -15, -5, -2, -4, -16, -5, -6, 0, -30, 
2, 0, 3, 7, 0, 1, 5, 4, -1, 7, 0, 6, -3, -3, 0, 9, 
-7, -4, 1, 5, 0, 7, 8, 5, 0, 13, 6, 20, -10, 2, -20, 38, 
-2, -1, 0, 1, 0, 0, 0, 3, 0, 1, 0, 4, -12, -2, 0, 18, 
0, 0, -1, 1, 0, 0, -1, 1, 1, 1, -1, 0, -2, 1, 0, 9, 
};




#define layer_5_bias_size ((unsigned int)8) //array size
#define layer_5_bias_range ((nn_t)163) //multiply neuron result with range/1024

const nn_weight_t layer_5_bias[]={
99, 103, 68, 81, 111, 127, 58, 65, };


#endif
