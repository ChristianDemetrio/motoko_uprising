#ifndef _LAYER_layer_5_H_
#define _LAYER_layer_5_H_


#include <NetworkConfig.h>


#define layer_5_type "output"

const sLayerGeometry layer_5_input_geometry = {4, 4, 8};
const sLayerGeometry layer_5_output_geometry = {1, 1, 7};
const sLayerGeometry layer_5_kernel_geometry = {4, 4, 8};

#define layer_5_weights_size ((unsigned int)896) //array size
#define layer_5_weights_range ((nn_t)689) //multiply neuron result with range/1024

const nn_weight_t layer_5_weights[]={
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
4, -5, 4, -2, -2, -11, 0, 0, 8, -11, 0, -1, 1, -9, 0, 0, 
-4, -7, 3, 8, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 
0, -7, -7, 1, 4, 0, 0, 0, -3, 0, 0, 0, -2, 0, 0, 0, 
2, -3, 8, 2, 4, -6, -28, -1, -5, -2, -32, -11, 0, 7, 14, -82, 
-10, 28, -19, 9, -4, 23, -16, 0, -5, 31, -22, 1, -14, 25, -10, 3, 
-68, 22, 0, -4, -66, 23, 0, -3, -73, 19, 3, -6, -71, 26, 1, -9, 
-1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 
-11, 21, -5, -3, -6, 19, -5, -3, -9, 23, -6, -5, -9, 26, -8, -11, 
7, 2, -3, 2, 8, 15, 1, 0, -7, 16, 1, 0, -1, 10, 1, 0, 
7, -3, -1, 1, 5, 0, 0, 0, 4, 0, 0, 0, -4, 0, 0, 0, 
8, -2, 5, 7, 7, 0, 0, 0, -5, 0, 0, 0, 3, 0, 0, 0, 
0, 5, 8, 0, 8, 2, 71, 0, 0, 2, 78, -2, -2, 19, -4, 3, 
0, 3, 7, -11, 4, 0, 8, -3, 7, 1, 8, -15, 4, 11, 10, -14, 
13, 10, -2, -1, 11, 7, 1, -4, 14, 11, 1, -1, 9, 11, -2, -2, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-1, 8, -11, -6, -1, 6, -11, -7, -1, 1, -15, -4, -2, 3, -21, -4, 
-3, -3, 8, 1, 4, -3, -11, 0, 0, -3, -13, -1, -7, 0, -21, -7, 
-8, -6, -5, 7, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-2, 3, 2, 0, 3, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 
3, -3, 5, 6, -8, -8, -37, 9, -4, -8, -39, 6, 4, -127, 55, -7, 
13, 5, 37, -44, 8, 5, 31, -45, 5, 4, 32, -34, 5, 3, 35, -29, 
-9, -11, 28, -31, -6, -14, 19, -29, -6, -15, 20, -31, -5, -13, 28, -38, 
0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
-8, -21, 33, -9, -6, -22, 28, -7, -6, -22, 34, -11, -5, -27, 39, -19, 
7, 6, 3, 4, 0, 1, 24, 1, -1, 0, 25, 1, 4, 1, 39, 3, 
-7, 0, 1, -4, -7, 0, 0, 0, -5, 0, 0, 0, 3, 0, 0, 0, 
3, -4, 3, -8, -7, 0, 0, 0, -8, 0, 0, 0, -5, 0, 0, 0, 
8, 3, 4, 0, -5, 1, 0, 0, 1, 0, 0, 2, -2, 30, 5, 0, 
0, 3, -1, 35, 0, -2, -6, 39, -9, -9, -6, 38, 1, -3, 0, 25, 
4, -2, -12, 26, 3, 1, -11, 23, 3, 0, -14, 20, 0, -1, -9, 24, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-2, 1, 8, -14, -3, 3, 8, -15, -4, 3, 6, -12, -4, 1, 12, -20, 
0, -1, 4, 4, 0, 0, -14, -8, 5, 0, -13, -9, -3, 1, -22, -7, 
-3, 1, 7, -2, 5, 0, 0, 0, 8, 0, 0, 0, -6, 0, 0, 0, 
-6, -6, 1, -7, 3, 0, 0, 0, -3, 0, 0, 0, 2, 0, 0, 0, 
1, 8, -2, 3, -4, -7, -7, -2, -8, -5, -10, -5, 5, 69, -126, -6, 
10, -5, -13, 18, 25, -6, -4, 21, 23, 0, -11, 19, 14, -5, -17, 16, 
2, -3, -6, 18, 3, -4, -1, 20, 1, -3, -1, 24, -1, -5, -7, 49, 
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
-4, -8, -21, 33, -3, -7, -17, 34, -3, -6, -18, 33, -1, -4, -21, 67, 
};




#define layer_5_bias_size ((unsigned int)7) //array size
#define layer_5_bias_range ((nn_t)335) //multiply neuron result with range/1024

const nn_weight_t layer_5_bias[]={
56, 56, 63, 25, 127, 49, 51, };


#endif
